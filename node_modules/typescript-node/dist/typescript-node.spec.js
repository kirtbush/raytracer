var chai_1 = require('chai');
var child_process_1 = require('child_process');
var path_1 = require('path');
var proxyquire = require('proxyquire');
var typescript_node_1 = require('./typescript-node');
typescript_node_1.register();
var BIN_PATH = path_1.join(__dirname, '../dist/bin/ts-node');
describe('ts-node', function () {
    this.timeout(5000);
    it('should export the correct version', function () {
        chai_1.expect(typescript_node_1.VERSION).to.equal(require('../package.json').version);
    });
    it('should execute cli', function (done) {
        child_process_1.exec("node " + BIN_PATH + " tests/hello-world", function (err, stdout) {
            chai_1.expect(err).to.not.exist;
            chai_1.expect(stdout).to.equal('Hello, world!\n');
            return done();
        });
    });
    it('should print scripts', function (done) {
        child_process_1.exec("node " + BIN_PATH + " -p \"import { example } from './tests/complex/index';example()\"", function (err, stdout) {
            chai_1.expect(err).to.not.exist;
            chai_1.expect(stdout).to.equal('example\n');
            return done();
        });
    });
    it('should eval code', function (done) {
        child_process_1.exec("node " + BIN_PATH + " -e \"import * as m from './tests/module';console.log(m.example('test'))\"", function (err, stdout) {
            chai_1.expect(err).to.not.exist;
            chai_1.expect(stdout).to.equal('TEST\n');
            return done();
        });
    });
    it('should throw errors', function (done) {
        child_process_1.exec("node " + BIN_PATH + " -e \"import * as m from './tests/module';console.log(m.example(123))\"", function (err) {
            chai_1.expect(err.message).to.contain('[eval].ts (1,59): Argument of type \'number\' is not assignable to parameter of type \'string\'. (2345)');
            return done();
        });
    });
    it('should be able to ignore errors', function (done) {
        child_process_1.exec("node " + BIN_PATH + " --ignoreWarnings 2345 -e \"import * as m from './tests/module';console.log(m.example(123))\"", function (err) {
            chai_1.expect(err.message).to.match(/TypeError: (?:(?:undefined|foo\.toUpperCase) is not a function|.*has no method \'toUpperCase\')/);
            return done();
        });
    });
    it('should work with source maps', function (done) {
        child_process_1.exec("node " + BIN_PATH + " tests/throw", function (err) {
            chai_1.expect(err.message).to.contain([
                (path_1.join(__dirname, '../tests/throw.ts') + ":3"),
                '  bar () { throw new Error(\'this is a demo\') }',
                '                 ^',
                'Error: this is a demo'
            ].join('\n'));
            return done();
        });
    });
    it('eval should work with source maps', function (done) {
        child_process_1.exec("node " + BIN_PATH + " -p \"import './tests/throw'\"", function (err) {
            chai_1.expect(err.message).to.contain([
                (path_1.join(__dirname, '../tests/throw.ts') + ":3"),
                '  bar () { throw new Error(\'this is a demo\') }',
                '                 ^',
                'Error: this is a demo'
            ].join('\n'));
            return done();
        });
    });
    it('should be able to require typescript', function () {
        var m = require('../tests/module');
        chai_1.expect(m.example('foo')).to.equal('FOO');
    });
    it('should compile through js and ts', function () {
        var m = require('../tests/complex');
        chai_1.expect(m.example()).to.equal('example');
    });
    it('should work with proxyquire', function () {
        var m = proxyquire('../tests/complex', {
            './example': 'hello'
        });
        chai_1.expect(m.example()).to.equal('hello');
    });
    it('should ignore all warnings', function (done) {
        child_process_1.exec("node " + BIN_PATH + " -a -p \"x\"", function (err) {
            chai_1.expect(err.message).to.contain('ReferenceError: x is not defined');
            return done();
        });
    });
});
//# sourceMappingURL=typescript-node.spec.js.map